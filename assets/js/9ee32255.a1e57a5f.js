"use strict";(self.webpackChunkdocsapp=self.webpackChunkdocsapp||[]).push([[223],{2311:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>r,contentTitle:()=>o,default:()=>p,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var s=n(4848),a=n(8453);const i={title:"Self-Host Deployment",sidebar_label:"Self-Host",sidebar_position:3.2},o="Self-Host Deployment",l={id:"deployment/self_host",title:"Self-Host Deployment",description:"LinguFlow Server, encompassing both the API and Web UI, is open-source and can be self-hosted using Docker, offering flexibility for deployment.",source:"@site/../docs/deployment/self_host.md",sourceDirName:"deployment",slug:"/deployment/self_host",permalink:"/docs/deployment/self_host",draft:!1,unlisted:!1,editUrl:"https://github.com/pingcap/LinguFlow/edit/main/docs/../docs/deployment/self_host.md",tags:[],version:"current",sidebarPosition:3.2,frontMatter:{title:"Self-Host Deployment",sidebar_label:"Self-Host",sidebar_position:3.2},sidebar:"tutorialSidebar",previous:{title:"Local",permalink:"/docs/deployment/local"},next:{title:"Develop",permalink:"/docs/category/develop"}},r={},c=[{value:"Prerequisites: Database",id:"prerequisites-database",level:2},{value:"Configuring the Database",id:"configuring-the-database",level:2},{value:"Deploying the Application",id:"deploying-the-application",level:2},{value:"How to Update",id:"how-to-update",level:2}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"self-host-deployment",children:"Self-Host Deployment"}),"\n",(0,s.jsx)(t.p,{children:"LinguFlow Server, encompassing both the API and Web UI, is open-source and can be self-hosted using Docker, offering flexibility for deployment."}),"\n",(0,s.jsx)(t.h2,{id:"prerequisites-database",children:"Prerequisites: Database"}),"\n",(0,s.jsx)(t.p,{children:"A database is essential for storing LinguFlow's business data, including applications, versions, and interactions."}),"\n",(0,s.jsxs)(t.p,{children:["LinguFlow is compatible with ",(0,s.jsx)(t.a,{href:"https://docs.sqlalchemy.org/en/20/dialects/index.html#support-levels-for-included-dialects",children:"several databases"}),". ",(0,s.jsx)(t.a,{href:"https://www.pingcap.com/tidb-serverless/",children:"TiDB Serverless"})," by PingCAP is recommended. It's a fully-managed, MySQL-compatible database that scales automatically and offers free quotas, making it an excellent choice for small development teams."]}),"\n",(0,s.jsx)(t.p,{children:"Regardless of the database selected, ensure you have the connection string ready once the database is set up."}),"\n",(0,s.jsx)(t.h2,{id:"configuring-the-database",children:"Configuring the Database"}),"\n",(0,s.jsxs)(t.p,{children:["LinguFlow leverages ",(0,s.jsx)(t.a,{href:"https://alembic.sqlalchemy.org/en/latest/",children:"alembic"})," for automatic table structure creation. However, the database must be manually created first. For TiDB Serverless, execute ",(0,s.jsx)(t.code,{children:"create database linguflow"})," via the Chat2Query page on its web console. For other databases, use the respective database client to connect and execute ",(0,s.jsx)(t.code,{children:"create database linguflow"}),"."]}),"\n",(0,s.jsx)(t.p,{children:"After creating the database, proceed with the automatic table structure creation:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:'# Install alembic\npip install alembic\n\n# Initialize alembic in the LinguFlow directory\ncd LinguFlow\nalembic init alembic\nsed -i \'1s|^|import model\\n|\' alembic/env.py\nsed -i "s|target_metadata =.*|target_metadata = model.Base.metadata|" alembic/env.py\nsed -i "s|sqlalchemy.url =.*|sqlalchemy.url = <database_url>|" alembic.ini\nalembic revision --autogenerate -m "init"\nalembic upgrade head\n'})}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Note"}),": Replace ",(0,s.jsx)(t.code,{children:"<database_url>"})," with your actual database connection string in SQLAlchemy format. For TiDB Serverless, it resembles:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"mysql+pymysql://<USER>:<PASSWORD>@<HOST>:<PORT>/linguflow?ssl_ca=/etc/ssl/certs/ca-certificates.crt&ssl_verify_cert=true&ssl_verify_identity=true\n"})}),"\n",(0,s.jsx)(t.h2,{id:"deploying-the-application",children:"Deploying the Application"}),"\n",(0,s.jsxs)(t.p,{children:["Before deployment, edit ",(0,s.jsx)(t.code,{children:"docker-compose.yaml"})," to update the ",(0,s.jsx)(t.code,{children:"DATABASE_URL"})," environment variable with your actual database URL. Then, on the production host:"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:"docker-compose up -d\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Access the LinguFlow page at ",(0,s.jsx)(t.code,{children:"http://{your-public-ip}"}),"."]}),"\n",(0,s.jsx)(t.h2,{id:"how-to-update",children:"How to Update"}),"\n",(0,s.jsx)(t.p,{children:"To update the application:"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-sh",children:'cd LinguFlow\ndocker-compose down\ngit pull\ndocker-compose build --no-cache\nalembic revision --autogenerate -m "update schema if any necessary database migrations"\nalembic upgrade head\ndocker-compose up\n'})})]})}function p(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(6540);const a={},i=s.createContext(a);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);