"use strict";(self.webpackChunkdocsapp=self.webpackChunkdocsapp||[]).push([[693],{1386:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>s,metadata:()=>r,toc:()=>a});var o=i(4848),t=i(8453);const s={title:"Summary",sidebar_label:"Summary",sidebar_position:4.2},l="Builder Summary",r={id:"develop/builder/summary",title:"Summary",description:"The Builder is a tool designed for constructing LinguFlow application logic using a Directed Acyclic Graph (DAG) approach. With a basic understanding of Blocks and Lines, you can quickly create an LinguFlow application.",source:"@site/../docs/develop/builder/summary.md",sourceDirName:"develop/builder",slug:"/develop/builder/summary",permalink:"/LinguFlow/docs/develop/builder/summary",draft:!1,unlisted:!1,editUrl:"https://github.com/pingcap/LinguFlow/edit/main/docs/../docs/develop/builder/summary.md",tags:[],version:"current",sidebarPosition:4.2,frontMatter:{title:"Summary",sidebar_label:"Summary",sidebar_position:4.2},sidebar:"tutorialSidebar",previous:{title:"Builder",permalink:"/LinguFlow/docs/category/builder"},next:{title:"Blocks",permalink:"/LinguFlow/docs/develop/builder/blocks"}},c={},a=[{value:"Basic",id:"basic",level:2},{value:"Information",id:"information",level:2},{value:"Canvas",id:"canvas",level:2},{value:"Blocks",id:"blocks",level:2},{value:"Lines",id:"lines",level:2},{value:"Debugging",id:"debugging",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",li:"li",p:"p",ul:"ul",...(0,t.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.h1,{id:"builder-summary",children:"Builder Summary"}),"\n",(0,o.jsxs)(n.p,{children:["The Builder is a tool designed for constructing LinguFlow application logic using a ",(0,o.jsx)(n.a,{href:"https://en.wikipedia.org/wiki/Directed_acyclic_graph",children:"Directed Acyclic Graph (DAG)"})," approach. With a basic understanding of ",(0,o.jsx)(n.code,{children:"Blocks"})," and ",(0,o.jsx)(n.code,{children:"Lines"}),", you can quickly create an LinguFlow application."]}),"\n",(0,o.jsx)(n.h2,{id:"basic",children:"Basic"}),"\n",(0,o.jsx)(n.p,{children:"Within the Builder interface, you can:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsxs)(n.li,{children:["Export the existing Blocks and Lines as a ",(0,o.jsx)(n.code,{children:".yaml"})," file. The export process anonymizes any keys."]}),"\n",(0,o.jsxs)(n.li,{children:["Import an existing ",(0,o.jsx)(n.code,{children:".yaml"})," file and visualize it."]}),"\n",(0,o.jsx)(n.li,{children:"Save the current content."}),"\n",(0,o.jsx)(n.li,{children:"Publish a saved version."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"information",children:"Information"}),"\n",(0,o.jsx)(n.p,{children:"The bottom right corner of the Builder interface displays essential information, including the application name and version name."}),"\n",(0,o.jsxs)(n.p,{children:["Clicking the ",(0,o.jsx)(n.code,{children:"info"})," button reveals detailed information:"]}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"App Name & App ID"}),"\n",(0,o.jsx)(n.li,{children:"Version Name & Version ID, where you can modify the version name."}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"canvas",children:"Canvas"}),"\n",(0,o.jsx)(n.p,{children:"The foundation of the Builder is a canvas. You can drag, zoom, or center the canvas to suit your needs."}),"\n",(0,o.jsx)(n.h2,{id:"blocks",children:"Blocks"}),"\n",(0,o.jsxs)(n.p,{children:["Right-clicking or pressing the ",(0,o.jsx)(n.code,{children:"space"})," key on the canvas brings up the block selection box. Selecting a specific block will place it on the canvas."]}),"\n",(0,o.jsxs)(n.p,{children:["Blocks are the nodes within the DAG, each representing a specific processing logic. Block types include input, output, LLM, third-party tools, numerical processing, and invoking other LinguFlow applications. For a detailed introduction to block content, refer to the ",(0,o.jsx)(n.a,{href:"blocks",children:"Blocks"})," documentation."]}),"\n",(0,o.jsx)(n.h2,{id:"lines",children:"Lines"}),"\n",(0,o.jsx)(n.p,{children:"With two blocks on the canvas, you can connect them using a line."}),"\n",(0,o.jsx)(n.p,{children:"There are two types of lines:"}),"\n",(0,o.jsxs)(n.ul,{children:["\n",(0,o.jsx)(n.li,{children:"Data lines: These lines transfer information from the outport of one block to the import of another block. Note that a connection is only possible if the field types of the outport and import match exactly."}),"\n",(0,o.jsxs)(n.li,{children:["Conditional lines: Produced by special ",(0,o.jsx)(n.code,{children:"condition"})," blocks, these lines carry results of True or False, allowing for the selection of subsequent blocks to run under different conditions."]}),"\n"]}),"\n",(0,o.jsx)(n.h2,{id:"debugging",children:"Debugging"}),"\n",(0,o.jsxs)(n.p,{children:["The ",(0,o.jsx)(n.code,{children:"Debugging"})," button, located at the bottom left corner of the Builder interface, opens the ",(0,o.jsx)(n.a,{href:"debugging",children:"Debugging"})," window when clicked."]})]})}function u(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>r});var o=i(6540);const t={},s=o.createContext(t);function l(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:l(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);